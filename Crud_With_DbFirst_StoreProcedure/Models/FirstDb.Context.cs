//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crud_With_DbFirst_StoreProcedure.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FirstAprochEntities2 : DbContext
    {
        public FirstAprochEntities2()
            : base("name=FirstAprochEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual int DeleteEmployee(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", employeeIdParameter);
        }
    
        public virtual ObjectResult<Employee> GetAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetAllEmployee");
        }
    
        public virtual ObjectResult<Employee> GetAllEmployee(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetAllEmployee", mergeOption);
        }
    
        public virtual ObjectResult<Employee> InsertEmployee(string empName, Nullable<System.DateTime> birthofDate, string gender, string email, string phone, string address, string city, string department, Nullable<System.DateTime> joiningDate)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var birthofDateParameter = birthofDate.HasValue ?
                new ObjectParameter("BirthofDate", birthofDate) :
                new ObjectParameter("BirthofDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("InsertEmployee", empNameParameter, birthofDateParameter, genderParameter, emailParameter, phoneParameter, addressParameter, cityParameter, departmentParameter, joiningDateParameter);
        }
    
        public virtual ObjectResult<Employee> InsertEmployee(string empName, Nullable<System.DateTime> birthofDate, string gender, string email, string phone, string address, string city, string department, Nullable<System.DateTime> joiningDate, MergeOption mergeOption)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var birthofDateParameter = birthofDate.HasValue ?
                new ObjectParameter("BirthofDate", birthofDate) :
                new ObjectParameter("BirthofDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("InsertEmployee", mergeOption, empNameParameter, birthofDateParameter, genderParameter, emailParameter, phoneParameter, addressParameter, cityParameter, departmentParameter, joiningDateParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> employeeId, string empName, Nullable<System.DateTime> birthofDate, string gender, string email, string phone, string address, string city, string department, Nullable<System.DateTime> joiningDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var birthofDateParameter = birthofDate.HasValue ?
                new ObjectParameter("BirthofDate", birthofDate) :
                new ObjectParameter("BirthofDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("joiningDate", joiningDate) :
                new ObjectParameter("joiningDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", employeeIdParameter, empNameParameter, birthofDateParameter, genderParameter, emailParameter, phoneParameter, addressParameter, cityParameter, departmentParameter, joiningDateParameter);
        }
    }
}
